import sys
import os
from   subprocess  import call
from   ctypes      import *
from   collections import deque
from   functools   import reduce

# Compress cres.

def count_sames(xs):
    if len(xs) <= 1:
        return len(xs)
    else:
        i = 1
        x = xs[0]
        while i < len(xs) and xs[i] == x:
            i += 1
        return i
    
def make_runs(xs, max_len=256):
    i = 0
    runs = []
    while i < len(xs):
        n = count_sames(xs[i:])
        subruns = n // max_len
        for _ in range(subruns):
            runs.append((max_len, xs[i]))
        if n % max_len != 0:
            runs.append((n % max_len, xs[i]))
        i += n
    return runs
    
def compress(data):
    runs = make_runs(data, 127)
    output = bytearray()
    i = 0
    #print(runs)
    while i < len(runs):
        if runs[i][0] < 2:  # We don't actually have a useful run.
            nonrun = []
            while i < len(runs) and runs[i][0] < 2 and len(nonrun) < 127:
                nonrun.extend([runs[i][1]] * runs[i][0])
                i += 1
            output.append(len(nonrun))
            output.extend(nonrun)
        else:
            output.append(0x80 | (runs[i][0]))
            output.append(runs[i][1])
            i += 1
    output.append(0)
    return output

filehead = """// This file, and all the compressed data it includes,
// is automatically generated by cres.py.
// The included files originate in the folder "compress",
// and a compressed copy of each is placed in "compressed".
// Please use only the constants defined in this file,
// rather than the change-prone numerical literals they map to.

"""

# Bass, our assembler, doesn't often play nice with Windows.
def basspath(s):
    return "\""+s.replace("\\", "/")+"\""
    
def comptofiles(asmf, src, dst):
    asmf.write(filehead)    
    asmf.write("addr.seek(CRES_BEGIN);\n\n")
    asmf.write("scope cres: {\n")
    
    ratios = []
    files = []
    paths = []
    for f in os.listdir(src):
        shortname = f.rsplit('.',1)[0]
        
        inp  = os.path.join(src, f)
        outp = os.path.join(dst, shortname+'.rpd')
        
        data  = open(inp, 'rb').read()
        
        print("Compressing " + inp)
        
        output = compress(data)
        
        outf = open(outp, 'wb')
        
        outf.write(output)
        
        ratio = len(data)/len(output)
        print(" -- Size: %d -> %d (%2.3f)" % (len(data), len(output), ratio))
        ratios.append(ratio)
        
        files.append(shortname)
        paths.append(outp)

    print("Average ratio: %2.4f" % (sum(ratios)/len(ratios)))
    
    asmf.write("\tfileptrs:\n")
    for f in files:
        asmf.write("\t\tdl data.%s\n" % f)
        
    asmf.write("\tscope ids {\n")
    for i, f in enumerate(files):
        asmf.write("\t\tconstant %s(%d);\n" % (f, i))
    asmf.write("\t}\n")
    
    asmf.write("\tscope data: {\n")
    for f, p in zip(files, paths):
        asmf.write("\t\tinsert %s, %s;\n" % (f, basspath(p)))
    asmf.write("\t}\n")
    
    asmf.write("}")

if __name__ == '__main__':    
    asmf = open(os.path.join('cres.asm'),'w')
    comptofiles(asmf, os.path.join('res','compress'), os.path.join('res','compressed'))
    